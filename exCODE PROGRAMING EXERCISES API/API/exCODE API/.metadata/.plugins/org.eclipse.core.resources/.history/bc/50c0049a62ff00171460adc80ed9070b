package com.excode.data;

import static com.mongodb.client.model.Filters.eq;
import static org.bson.codecs.configuration.CodecRegistries.fromProviders;
import static org.bson.codecs.configuration.CodecRegistries.fromRegistries;

import java.util.ArrayList;
import java.util.List;

import org.bson.codecs.configuration.CodecRegistry;
import org.bson.codecs.pojo.PojoCodecProvider;

import com.excode.model.User;
import com.mongodb.Block;
import com.mongodb.MongoClient;
import com.mongodb.MongoClientOptions;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;

public class ErrorData {

	static ErrorData errorData = null;
	static MongoCollection<Error> colErrors;

	public static ErrorData getInstance() {
		if (errorData == null) {
			errorData = new ErrorData();

			CodecRegistry pojoCodecRegistry = fromRegistries(MongoClient.getDefaultCodecRegistry(),
					fromProviders(PojoCodecProvider.builder().automatic(true).build()));
			MongoClient mongoClient = new MongoClient("localhost",
					MongoClientOptions.builder().codecRegistry(pojoCodecRegistry).build());
			MongoDatabase dbUser = mongoClient.getDatabase("db");
			colErrors = dbUser.getCollection("Error", Error.class);
		}
		return errorData;
	}

	// GET ALL ERRORS
	public List<Error> getErrors() {
		final List<Error> errors = new ArrayList<Error>();
		Block<Error> printBlock = new Block<Error>() {
			public void apply(final Error user) {
				errors.add(user);
			}
		};
		colErrors.find().forEach(printBlock);
		return errors;
	}

	// GET ALL SPECIFIC ERROR
	public List<Error> getErrorID(String errorID) {
		final List<Error> errors = new ArrayList<Error>();
		Block<Error> printBlock = new Block<Error>() {
			public void apply(final Error user) {
				errors.add(user);
			}
		};
		colErrors.find(eq("errorID", errorID)).forEach(printBlock);
		return errors;
	}

}
